from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv
from os import getenv

router = Router()
load_dotenv()
ADMIN_CHAT_ID = getenv("ADMIN_CHAT_ID")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

class SupportStates(StatesGroup):
    waiting_for_question = State()

# –ö–æ–º–∞–Ω–¥–∞ /support
@router.message(Command("support"))
async def support_start(message: Message, state: FSMContext):
    await message.answer("‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å.")
    await state.set_state(SupportStates.waiting_for_question)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∞–¥–º–∏–Ω—É
@router.message(SupportStates.waiting_for_question)
async def receive_question(message: Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ username"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –≤ –Ω–∞—á–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    text_to_admin = (
        f"[USER_ID:{user_id}]\n"
        f"üì© –í–æ–ø—Ä–æ—Å –æ—Ç @{username}:\n\n"
        f"{message.text}"
    )

    await message.bot.send_message(ADMIN_CHAT_ID, text_to_admin)
    await message.answer("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

# –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ reply
@router.message(F.reply_to_message)
async def admin_reply(message: Message):
    reply_text = message.reply_to_message.text
    if "[USER_ID:" not in reply_text:
        return  # –≠—Ç–æ –Ω–µ support-–≤–æ–ø—Ä–æ—Å

    try:
        user_id = int(reply_text.split("[USER_ID:")[1].split("]")[0])
        await message.bot.send_message(user_id, f"üì¨ –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n{message.text}")
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")